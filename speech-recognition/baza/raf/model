ccopy_reg
_reconstructor
p0
(chmm
Hmm
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'features'
p6
(lp7
cnumpy.core.multiarray
_reconstruct
p8
(cnumpy
ndarray
p9
(I0
tp10
S'b'
p11
tp12
Rp13
(I1
(I17
I2
tp14
cnumpy
dtype
p15
(S'f8'
p16
I0
I1
tp17
Rp18
(I3
S'<'
p19
NNNI-1
I-1
I0
tp20
bI00
S"\x02MB+2Y\xc1\xbf\x17$F[\x02\xd5\xbe?T\x8dp\x8fF\xee\xf9?\xbf\xcc\xde?\x82d\xec\xbf\x7f\xb5o\x1cT\xf9\xec?J \x01\x81g\xf2\xda?D\xb4}s7v\xe7?j\x1e>h\xccv\xf7\xbf*[\x81v\xb1.\xe8?O\xae\xf4\x94B#\xb5\xbfB\xa0\xea\x10\xe2\x8a\xfb?\xb3\xc2\x81bM\x9e\xe9?r\xce\xa5\xfbq\xa4\xf3\xbf\x04i\x15\x9c\x94\xa8\xf3?\x1d\xa2@\x1e(>\xe1\xbf\xde\x8af\x1b\xc7k\xf9? \x80\xf1b1m\xe1\xbf\xda\xd2\x90\x94*\xa7\xd2?\xb5\x91\x1dM\x1a@\xe4?E\xe3nH\xb2\x04\xe9?c\xc8\xf0\x019i\xe0\xbfT\x05\x07\xd8\x14Y\xf4\xbf_gJ\xce\xb9\xfd\xe3\xbf\x01\x88\t\xac\xe0\x9e\xfc\xbf'\xf9j\x8e\x96\x12\x00\xc0\xeb\x95\xcf\xdaFr\xe8\xbf\xd6\xa0\xf3\x95@\\\xe0\xbf\x0f%\x89\x0e\xe3\x11\xe0\xbf\xdf\x16\xfaR\x85.\xee\xbf&\xab;L,\xcf\xf9?\x1c)w\xdc2&\xf0?h\x89\xbcg[\x8c\xd8\xbfy\xcf\x1b\xae\xe2,\xd5\xbf[)\x80\xff\x99>\xd3?"
p21
tp22
bag8
(g9
(I0
tp23
g11
tp24
Rp25
(I1
(I25
I2
tp26
g15
(S'f8'
p27
I0
I1
tp28
Rp29
(I3
S'<'
p30
NNNI-1
I-1
I0
tp31
bI00
S"P\xc3:\x9e\x90q\xc7?\xc6\xa1\xb97+;\xd0?zXLE\xc8\xeb\xf2\xbf\x01\xc2\xc2\xab#\xdd\xfa\xbfE\x98\xee+k\xf9\xf5?\xbc\xc2ZW\xcc\xeb\xfc\xbf\x16\xee\x8e\xd3[\x81\xf2\xbf\xcf\xef\x14\xefN`\xdb\xbf'1\x8ft\xd70\x01@$\xe5&\xccs\x88\xe8?\x87\xa3\x13F\r\x86\xe0\xbf\xf9x\r\x94\x8e\x1b\x9f\xbfW\xae&\x16\xa3\xc9\xe4\xbf\xba\x99Z\x0c\xf9\x91\xba?\xc6x2\xe3E?\xe6?\xe6\xe6\x98\x15bX\xa8\xbf{^\xc3?!K\xce\xbf{\xdc\xc31\x15\xe8\xd6\xbfa\xb9\x84`\xb9H\xf6?\xd7\xf4\xc8\xfezH\xfc?v\x94\xea'\xbc\x89\xda?z\x07\xf5\x18\x0e\xdf\xfb? \xb7\x15\xac\x9f\x10\xd1?.\x1ddXG\xb2\xf0?U(\xf0\x9c\x83n\xc9\xbf\x1b\xd6\x87\x05OX\xc1\xbfN\xb9\xa7\x12\xff\x1f\xb4\xbfZ)vE-\xf1\xc0?#X\xd2i\x06\xb6\xf0\xbf\x9a\x1d\xef\xd6\x14(\x00\xc0\x19i\x0e@*\x90\xed\xbf\xad\xa3W\xac\x15\xf1\xf5\xbfr\xfdo\x86PH\xed\xbf\x12\xb4l\x1d\xec\x10\xd8\xbf^\x06\xd1f\xf4.\xfb?\x1f\x01,lx'\xf1?\xf6\x8f\xe1\xd6:\r\xec\xbf\x1af0\\\n>\xc2\xbf\x96\x87\xc9\xf5\x8a\xff\xd7\xbf\x17m\x9cA\xa7\x0b\xec?\xcav&\xf5\x00x\xf6\xbf6\x93}^{5\xe0?\\\xbe\x0eg\xf2\xa2\xf6?\xdb\xd9\xa26\xa0\x1e\xd8\xbf~\xdf\x10\x0by-\xd4?g\x9e\xef\xfdF\x7f\xec?\xa7-\x7f\x15\xf9\xe4\xf0\xbf\xd5#\xb1\xcb\xaa4\xf0\xbfp\xbdz\xa7\xd4\xbc\xe6?\xfd\xdeRI\x16&\xe4?"
p32
tp33
bag8
(g9
(I0
tp34
g11
tp35
Rp36
(I1
(I21
I2
tp37
g15
(S'f8'
p38
I0
I1
tp39
Rp40
(I3
S'<'
p41
NNNI-1
I-1
I0
tp42
bI00
S"\x10\xd7\xab\xf4c\xfd\xa5\xbfI>\xd1\x88\x8b\xc2\xd6?)\x19<\xa9\r\xc6\xdc?\xd1\x04OWsq\xd8\xbf\xf2\x11\x1ayJ\xfd\xc3\xbf?\xc5\xaf\xd4W\x18\xc8\xbf\xee\x8d.\x80\xf8H\xf1\xbf\xc32/\xf3|\x1e\xd5?\x99\xa3\x14G\xffB\xf0?\x15k\x1b,A\xcf\xb2\xbf\xde`\xee\x86uZ\xf9\xbf\xbb\xbbWN\xf8\xdc\xa5?\x8e\x9d\xb5,\xef\x7f\xd9?\x13e'y5)\xbc?\x99\x1e\x1b\xa5\xed\xef\xf7?B\x9c\xaa{\x84\xc3\xec?Ko\x86\x95w\xfd\xed?sZ\xf4\xd2\x9c\xa3\xcc?*j\x02\x82\x18\xe7\xf4?\xf3\xdf\xa9\xbf\x03\xf1\xda\xbf\xad\xc4\xe0\xc9\x12\xdc\xb6\xbf\x12D\xd4\xff\x82(\xea\xbf=i\x0c\xee\xe9\x81\xdc\xbf\x8ehw\x93. \xe0\xbf\x00:\xe7\x7f\xe0c\xe9\xbf\xdfh&%d\x1e\xdb?\xb2\xf3y\xc7L\x16\xfb?\x89\xcd\xe1\x95\xaf\xaa\t\xc0\xf1T\xba\xba\xf7\x12\xf2\xbf\x80)\x0b\x03fh\xd6?3WW%A\r\xe1?9\xf7y\x00_\x99\xed\xbfvE\x84\xccNO\xfc\xbf\xa5\xc7\xf8\xe8\xc19\xe9?N!q\xe7\x8eN\xdb?p\xfb\x15\x1d\xe3&\xdc\xbf\x85\xc3\x1b|\xc8\xff\xde?\x99h\xdb2\xd0F\x03@\xcc\x87\x8c\x983P\xc3\xbf\x850oUQ\xe5\xdc?\x1c,0IH\xfb\xf7\xbf.\x89Z\x8a\x83f\xe2?"
p43
tp44
bag8
(g9
(I0
tp45
g11
tp46
Rp47
(I1
(I17
I2
tp48
g15
(S'f8'
p49
I0
I1
tp50
Rp51
(I3
S'<'
p52
NNNI-1
I-1
I0
tp53
bI00
S"\x1as\x1f\xacsy\x8f\xbf\x1d\xeb\xf14/V\xd8?\xb6N\xcd\xb8Cm\xd6\xbf\xa4\xd8\xbe\xeeK8\xc1?\x92\\\xed\x82\x90\x02\xd4?\xff\x8a\xa3\x9c\xc4\x00\xd8?&i\xa9\x9d:1\xc1?\xa9\xec\xed\x02Tb\x01@\x97`B\xaa\x9e\xf1\xe8\xbf\xc0\xe9\x0bgN\xd9\xe1\xbf<{\xb1Vk{\xed\xbf\t\xe1P]:\xb2\xe2\xbf\xc6i$!\xf6 \xf0\xbf1gO\xf7\xaa\x1b\xe3?g\x16\x05\xaf\xd5\x0f\xab\xbfL\xd0\xfd_\xc0\x11\xf2?z\x8d\xb5\xdeSG\xec\xbf$Z\x0cws\xcd\xc0?\xb5\x14\x02\xb3\x1a\x80\x80?!\xdaF\xa4\x90d\xe2\xbf)\xd24\xf2C\xb4\xe0?p_\\\x02\xf6\x10\x02\xc0Sf\x80\xa1\x0b\t\xf1?\xce\xe7\xff\x8191\xe4?\xd0x\x07\x8e\x92o\xd0\xbf\xad+&\x15\x08-\xd1\xbf+1\xefD\xebf\xee?\xe5\x11x\xb4k!\xd5\xbfw\x1a'\xd7\xe87\x07@\x1a\xb3\xb6\x06V*\xe5\xbf\xe3\x0b\xee\x95\xe4|\x93?+\xc7\xc8yY\xa1\xf1?g&\x10\xf0gR\xfa\xbfqa\x9bN\xe8\xb1\xf6\xbf"
p54
tp55
bag8
(g9
(I0
tp56
g11
tp57
Rp58
(I1
(I24
I2
tp59
g15
(S'f8'
p60
I0
I1
tp61
Rp62
(I3
S'<'
p63
NNNI-1
I-1
I0
tp64
bI00
S"]\xbb\x9b)\xa1j\xcb?>AW\xe8\x9d\x82\xa6\xbf\xa3p\x83\xf1T\xd7\xf1?:\xc4\x02\r\xe5\x1c\xf0\xbf\xe3\\\x0f\x10\x9a\x9e\xc7?F@\xdf\x1d\xc55\xf3?!\x9e\x7fAH\xa0\xf5\xbf\x0e\x89R\xf0\xe7\x11\xc8?\xed\x98\xc0\xe2\t\x11\xf3?\x93L\xf7o\x8dY\xf3\xbfJ\xb5=\x810^\xc3?9E\xf8\x99\xe1\xef\xeb?\xa6LC\xf0\xa39\xdb\xbf\x0bQ\xff[\xcdv\xef\xbf\x06xO\x01'\xb1\xa3\xbfk\xf0\x85\x15\xa3\xd2\xf3?x\xa6\x02\xa9\xe2o\xe0?\x05c\x1d\x0b0\xc6\xe5\xbf\x9f\xdc\x83\xfa\xf8\x8a\xe5\xbf\xdf\xba?J\xde\x9d\xfe\xbf\x03WI\xeb\xc0\x12\xf3?`6Ju\x9e\xf2\xe2\xbf\xe6\xa4\xe6\xcf\x8e\xe0\xf2?\x1a-\x11:\x81\xbb\xed\xbfWIg\xb1l\x07\xe1\xbf,\xd9\xd2>\xad\xfa\xfc?$_x\n\x01\xca\xe3\xbf\xbb\xc5\xac<+\xda\xe3?e\x89\x0f\x80z\xdf\xf0\xbf\xdc\x08F\x7f\xf5\xbf\xe5\xbfi\xee\x17\x01\x14\x93\xf2?\xc6\xc6\xaf\xb7\x8a_\xc7\xbfA\xf2\xcd\x19\xdc\xe9\xac?v\xc8F}\xe0;\xd0?\xac\t')$_\xf8?}\xc1\\z\xd7l\xf0\xbf2\x11C\xd0\xd9@\xe6\xbf\xb2\x02\xf3\xa6Z\xaf\xed?\x83\x9d\x9d\xa6\xd3z\x01\xc0\x8b\x13\xe4\xcb\xe3G\xfc?\xeeP\xff\x81\x8b\xa6\xe7?v1\x1e\\\x0c\xc8\xb7?(f=\x7f\xe5\xe6\xd3?\xc7\x16\xb4>\xc2\xf5\xd2?\xb3}\xb5\x16\x96@\xbf?\xc4\xb8\xcf\xe1\xf3\x80\xf0\xbfh\x9c01\x90\xa5\x00\xc0\xa1\xf9\xcaD\xd8$\xf0?"
p65
tp66
bag8
(g9
(I0
tp67
g11
tp68
Rp69
(I1
(I20
I2
tp70
g15
(S'f8'
p71
I0
I1
tp72
Rp73
(I3
S'<'
p74
NNNI-1
I-1
I0
tp75
bI00
S'\xb0\xd43\x98R\xe8\xad\xbfs\xb4\x933v\xb7\xa0?\xdd\xf0\xf3[\xc0\t\xfb?\x8f"&E\xfd\xc5\xe9\xbf\xf3\xd3yc\xac\xdd\xf0\xbf\xc5|\xdf.r\xba\xf1?c\xd9\x1b\x9f\x1aF\xef?\xcc\xf8h\xa6E\xe4\xe0\xbf_\xe6\x83\x1eS\x8b\xfa\xbfG\xd5\x9e\xbb=\xed\xf9\xbf\x1cb\xa0\xc3,\xb9\xec\xbf\xf8W\x1d:\xbe\xf9\xff\xbf8z\xea\x02\x11\xf7\xda?\xef\x987\xa3\xff%\xe0?\xe4\xb9/\xab\xfe\x16\xfd?q\xc0\xd7\x19\xae\x05\xe3\xbf[\x00\x1c\xabu\xb2\xe8?\x93\x9d\xcev\x06\x8a\xf8\xbfY*\x962\xb4\x8b\xd4?S\xf5p~\x93\xa5\xda\xbf \xb9c\x17\xb7\xe6\xb0\xbfn\x00\xb3B\xf0C\xb5?\xdaNl\xee\x8c\xef\xf4\xbfl\xa1\x9dt\'J\xce\xbfX\x93\xb0H\xc6\xfc\xf5?.\x10Gm\n\x7f\xcd?^v\xd4+\x92\xc0\xed\xbfG\xfd\xae\xefN\xc4\xd0?e\x90\xb9\xc5\x7f\xc8\xed\xbf\x1d\xec\xf0\xc6\x05\xaa\x9d\xbfv\x85\xb1i0\xf0\xea\xbft\xa0c{iD\xb0\xbftDt\xcd\xc4LP?\xady$C,1\xf6?%\xfc\x8a\xf5\xabu\xf0?\x9dt\xf3\xd8,\x06\xf4?\xb3\x8f\xfc\xd88\x96\xce\xbf\xaaq\x02\x18\x9b\xea\xf8?\x81\x06u\x1f\x13\xc8\xda\xbf\xe7\rNx=\x8c\xf6?'
p76
tp77
bag8
(g9
(I0
tp78
g11
tp79
Rp80
(I1
(I12
I2
tp81
g15
(S'f8'
p82
I0
I1
tp83
Rp84
(I3
S'<'
p85
NNNI-1
I-1
I0
tp86
bI00
S'o]\x80\xfek\x18\xe1\xbf\x981\xc3\xa7j\xa9\xd1\xbfF\xfb7\x8b|;\x8f\xbf8Dl\xbf\n\xaf\xe7?\x1bj\xad\xa4T\xa4\xec\xbf\xc2<\x0b\xdd*\x82\xf1?V\x10\xd3X\xbf\xdd\xf4?\x892zo:\xed]?\nB;x\x1f>\xf2?\x11wZ\xd6U\xa9\xf2?gx|\x07\x98e\xc6\xbfvk<a\xc8]\xe5?\x1c(\xa2\xfd$\xde\x00\xc03\x85<\x1e\xb5\xb4\xd1\xbf\xe1\x8c\xe6d*S\xe0?8b\xabz:W\x01\xc0"\tD\xe3^\xa6\xd6\xbf\xbdYL\xd7ld\xf3?]\x8a\x83\x14~o\x97\xbf\x16e\x95\x11\xde\x7f\xe6\xbf\xe58\x8c\xeb\xc9\x90\xe0\xbfJ\xce\xc1\x06\x05\r\xc9\xbf\xb5\xc5H\xea\x1a\xb0\xfa?\xb7\xa5(\xd9E6\xf4\xbf'
p87
tp88
bag8
(g9
(I0
tp89
g11
tp90
Rp91
(I1
(I18
I2
tp92
g15
(S'f8'
p93
I0
I1
tp94
Rp95
(I3
S'<'
p96
NNNI-1
I-1
I0
tp97
bI00
S'\xbb\x87R\x9d\xb5\xea\xb0\xbf\x1b\xa2\xa3r\xc7\x80\xba?i\xef\x96U\xc3\xc8\xbe\xbf[\xfa\x0e\x1f\xbd\xe6\xec\xbf\xed\xcdg\xcb\xd7\x86\xfa\xbf7%\x12\xcc\x8b\x9d\xbe?(q\xf3\xd4\x974\xf3?F\xa4\xe0\xc79\xac\xde?\x05\xb0X\xc0\x82\xcf\xfc?q\xac\x82\xc5R\xd4\xf9?Q\x1an\x8c\x9cb\xca\xbfZ\xd1n\x1c\xc3p\xe2?\x1a\xa1\x04YC;\xf5?\xe7\xdf+\x0f|\xfe\xcd\xbf\xd6\x03\x1b\xa9z\x1f\xed?\x81\xee\x907l\xb8\xf7\xbf\x81\xf0\xdd\xcb\xa5-\xc4\xbff\xeeW)w\x1a\xf1\xbf\x01Z\x01w\x97\xe4\xe0\xbf\xaf\x07\xbf\x7f\xadk\x01@J\xc9\x0b\xd9\xc34\xe3?\xc9\xe1*\xdf\x19\xb6\xd5\xbf\xd6\xd8\x1b\xbb\xd9\x85\xe9\xbfQ\xf7\xa2\xe6\x82]\xfa\xbf\x8b\xa0>\x87E\xa4\xe8\xbf/\xf4\xabC\xffV\xf2?\xad\xa3^\x1d\xae\x97\xc2\xbf/\x9e\xfb.W!\xd7\xbf\xfb\x9a\xf9LiX\xec?\x0bU\xe3\x06\xa9\x95\xc1?5]\xc8\xce\xd7\xdc\xfd\xbf\x84\x11\xfe\xc0"\x16\xd0?\x9e\xb3/\x94\xd3\xcf\xf1\xbfR \xd1\x93\x18\x10\xe1?u\x7f!\xa6\xc4\x8a\xe6?L\xafI\xbb\xdb\x9e\xf1\xbf'
p98
tp99
bag8
(g9
(I0
tp100
g11
tp101
Rp102
(I1
(I26
I2
tp103
g15
(S'f8'
p104
I0
I1
tp105
Rp106
(I3
S'<'
p107
NNNI-1
I-1
I0
tp108
bI00
S'\xdd\x10\xbe\xe5}s\xbc\xbf\xe4\x8c\xec\xef+\x05\xd9?\xf6\x7f\x8b\xbd\xe9\x0c\xd3\xbf\x85\xbb[\x8f\xd9\xd6\xe1\xbfU\xe2k\x03\xf31\xf4\xbf\xb4\x86\xe4\xe5\x07\'\xe0?\xcbO\xbe)\xfcv\xd0\xbfZ\xe3\xc11\xe1\x0c\xf8?\xd8\xd1)\xd8\x99\xe2\xf1?"\x97}\x0339\x94?\x17CP\xe3\xff{\xc0\xbf\x9a\x8fhO\x8eg\xd4\xbfl]\'\xf8%\xcf\xe2?\x83\xa3\xdb|\xbbq\xe7?\x801T2\xdd\xd4\xe0?T\xccu\xcf\xb5\xf0\xe6\xbf\x93\xda9\x85\xfe\xfa\xf7\xbf<8\xedr\xda\xba\xf0\xbfh3\xfa\xf2\x9b\x18\xab?9\x9f,u\x0f\xae\xf9\xbfi\xcc\xb4;<F\xda?\xe7\xff\x8cJ\x91r\xe5\xbf\xf1\xb1\x15\xf9\x88k\xec\xbf=\x9aw\xd1\x7f\xa6\xed\xbf\xd0\xfdxZ\xc3\xaf\xf4\xbf~\xdf%\x8b^\xf7\xce\xbf?\xc8\xffJ\x9ff\xfb?\xe6\x1a1\x89\xba0\xed\xbf\x05\x94s0\x80\xf8\xef?R\x15\x82\xe24\xe5\x02@\xf6\xc5)B\xe5=\xf7?9\xb9yFR\xeb\xee?Iqk\x80\x93V\xfe\xbf\x80}\xae\x86\x84\x10\xc8\xbfr\x8d\x10K\x06\xd6\xee?/\xfc\t\x99\x9f\xff\xde?\x1epsz\xb9\x18\xf4?\xf3\x1ar\xda\xa9\xad\xd9\xbf\xb3\xf3\x9b\xb4dK\x98\xbf\x94*z\x90\x08\xc2\xfe?S\xdcN\xecse\xcc?\x96xgw\x1c\x1a\xce\xbf2k\xa6\xca\x08\x05\xf2\xbfyZ\xc8e:\xd0\xf3?\xe8\xb3\xce+\x0ba\xf6?\x12D\x0fB\xdaY\xc5\xbf\xbb\xc3\xefj%\xb0\xe2\xbf~\xf0I\xc0\x18\xfb\xde?z\x93\x0f=\x84\xf3\xf4\xbfK\xb2\x06\xe3_\n\xf8\xbf\xef\xe3\xa1}\xb1\xa7\x97\xbf|d\xff\x0e\xb6\xeb\xf1\xbf'
p109
tp110
bag8
(g9
(I0
tp111
g11
tp112
Rp113
(I1
(I18
I2
tp114
g15
(S'f8'
p115
I0
I1
tp116
Rp117
(I3
S'<'
p118
NNNI-1
I-1
I0
tp119
bI00
S"tV\x07\x1bL=\xcd? \x853\x95\xf6_\xd6?\x1e7\x1f.! \xcf\xbf\xae\xcf\x8b3]b\xea?v\x92,\xd5+\x8e\xf8\xbfU9T\xb0Cv\xfe\xbf\xea\x1d\x18H\xd4.\xd8\xbf \xd5\xe5\xd0\xc2\xbe\xd0\xbf\xab\xdc\xb8\xb07~\xd8?4j\xd9\xf5'\x01\xbb?\x93/\x95\xa0\x83t\x01@\xd0/O\xd0\xce6\xb4?\xfenL\xcd#\xdc\xf0?\x8d\x03\xd1.i\x05\xf1\xbf\x92\x07\x97\x9d\xcce\xe9\xbf&\x04\xe0\xb4\x94\x84\xe2\xbfw\xf5R\xe6\xa4>\xf8\xbfG\xc9}~5\x1b\xc9?\xa8\xf8\xacg|\x15\xe8\xbf\xd1\xe1\x82\x0e!{\xf1?f\xc3\xa9\xb9IK\xeb\xbf\xc1;\xc58J\xd7\xef\xbfg\x00\xb5\x9b\xa4\xef\xe1?\x89\xac\xb6\xf9Z\xea\xdf\xbf\x97\xc8iF\x05\xa9\xd0\xbf\xf9\xc8\x14\xf5\x1e.\xc3?\x144\x11\xaeH-\xf2\xbf\x1a\xffI\xb5\x18\x7f\x03@\x8b\xc4\xb4\x16\xe9$\xf3?\xd9p\x8b\xc9\xca\x95\xf1?_\x8fm\x08\x9f\xa0\xe7?\xcdB\x89\x1e\xa7\x1c\xd6\xbf\xe9\xd4\xa6P\xc7\x8e\xf3?\xbcjs*\x08\x97\xf5\xbf\xb4&mPv\r\xb9\xbf\xef\x83U|D:\xe5?"
p120
tp121
basS'next_prob'
p122
g8
(g9
(I0
tp123
g11
tp124
Rp125
(I1
(I9
tp126
g117
I00
S"nf\xe9b\xf3\xbd\xe7?\xef9\xfa\xfeB.\xe6?\xc8\xc2!\xee\n;\xe9?\\x=)\x11\x8a\xe4?\x91\xa9\x14\x19\xe8\xfa\xe0?j{q\x081\xa7\xea?\xce&'\x1a\x8a\x14\xde?\x8c_s\x03\xd7\x03\xec?\xc3\xf1\xd8\xfa%\xcf\xe2?"
p127
tp128
bsS'label'
p129
S'raf'
p130
sS'mfcc_size'
p131
I2
sS'num_states'
p132
I10
sS'nodes'
p133
(lp134
g0
(cscipy.stats._multivariate
multivariate_normal_frozen
p135
g2
Ntp136
Rp137
(dp138
S'dim'
p139
I2
sS'cov'
p140
g8
(g9
(I0
tp141
g11
tp142
Rp143
(I1
(I2
I2
tp144
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p145
tp146
bsS'cov_info'
p147
g0
(cscipy.stats._multivariate
_PSD
p148
g2
Ntp149
Rp150
(dp151
S'U'
p152
g8
(g9
(I0
tp153
g11
tp154
Rp155
(I1
(I2
I2
tp156
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p157
tp158
bsS'log_pdet'
p159
cnumpy.core.multiarray
scalar
p160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p161
tp162
Rp163
sS'rank'
p164
I2
sS'_pinv'
p165
NsbsS'_dist'
p166
g0
(cscipy.stats._multivariate
multivariate_normal_gen
p167
g2
Ntp168
Rp169
(dp170
S'_random_state'
p171
cnumpy.random
__RandomState_ctor
p172
(tRp173
(S'MT19937'
p174
g8
(g9
(I0
tp175
g11
tp176
Rp177
(I1
(I624
tp178
g15
(S'u4'
p179
I0
I1
tp180
Rp181
(I3
S'<'
p182
NNNI-1
I-1
I0
tp183
bI00
S'\xa2\x84\xd8\xd6\xe9\x8e=\xcd\x11\x89\x92\x02\x9e\x1f\x15~\xe80` \xcb\x162\xdc\x99\xcd\xfa\tB2\x150U\x9eg\xc3<o\xcc+4N\xfes\x1d\xc6\x9bV`DZ\x14\xedz<\x88\xb3\x7fS8k\xa8\xbc\xa7\xcb\xb9\xf5Z\xcfY\xd3\t\xae\x0b\xf0\xfc\x1e\x91Ac\xe0h_\xf0J\n\xf7|4D=\xd1_p\xe7k\xac\xb8\xbb\xb8?\x1a\x07\xdc\xedok\x84\xf4BsVh\xc2\x8d\x9e\xf48\xab\x10\xaa\xb1Es\xd7\x1a#\x9a\x0c\xebNJ^A\xa9^\xc3\xca9\x83H\xb0\x98\x1c\xeac\xd1\xcex\xba\nO\xc44 \xd7r\x1c5s_\xd9\xef\x9b\xf8\x0b\xe2\x85\x06\x1eTb\x8b\x9er%\xcbD\xe7\r\xb1/\xa7*\xefV\xc6a\xaf/\xaa\xb3\xef_\x13\xe2\x89E\xc5\xa2\x97\xbb)h\x8fcUJi6\x95\x9e3\xe9"pN\xa70Y\xf2B\xfb\x1bb\x1d\x9e\x81\x97\x11k1\\h`\xa4\x1e\x8f]\xb1\xdb\x90\xe6m\xb2M\xa0\xec\xb1\x01\xa7t\xd9l\xb8\xbam\xd8T\xe7\xda\xd07\xc6U\xfc\x1c\x96\xa0\x8aS\xdc_\xcej\xdaB\x1d\xe1"a\t\xdbeNI\x80\xe9\x1b\xbf5\xe4\x94\x92Z/\x9f7\xb3\x89\x9b\xdf\xc5\xb8\xff\xe6\xae\x81e`\xd8O\xd8\x85\xea\xb8\x91\xd7\xee\x1b6\x16B\x03<\xe1&\xe7\xbe\xd5-\xfb\xca\xe39\x1e\xaa\xd2\xff($.S\xefE?\xed\xb4K\xa4\xe1Z\x15l\xad\xdf\xfb\xa1>\xd8\x90gv\x96w\xbe\xba\xbeB\xb3+\xdf\xebz\xf1c\xd7\xb1M\x0c\x1e\x1f1\xe9q\xb2\xe6\xf2\x8f{t\x94\xe9\xd5\x92\x91y\xbf\x97u\x02\xaaD\x8d\x11\xc3`\xf3\x9b?\x0c\x1c\xad\xe3C\x07#t\x95\x9bX\x86\xa7\xd3\xc6!vc\x98=\x9bT\x1f\xc5\xe4\x1d\x95D\xf1^ \x06\xe9\x96!\xc6\xb5W\x87X\xc0\xe3]\xd3\x9b\xc8By\xb7\xa8\xb5\x83\xaax\xc5\x08\xe4!\x13#+\xc9\xe7\xd1n$CE\x01\x8a\x8f\xe2\x16\x14}\xb4\x0b+\x97\x17\x02\xe26\xc6\xa2\x9d</\'\x08o\xca\x1e\xe6\xa2\xf2\xb2!\xcfV\x8fa\xe8l\x16O\xab\xfc\xc0B\x8dHP\xc5G\xd4a\xe7\xba\xc9\xbf\xe3cZV`\x97\'mI\xad\'t\xaf\xecF\xee\x89\x05\x97\x86\xa4\xe2\xady\xca\x17\xbe:\xbe\x81:\xbd+\xa5\xceT\xe5\xd5\x05v\x1e\\^\x058\xeb\x1b\xb4\xf2S"\x0f\xf9\x85\xc3!\xa4\xf3$\x10\x94\xdd\xe5\xc9\xb7\xd3\xd3I\n\rcD*a\xdf\xc8\xce\xc5\xa2g\x02\x80\xdfs\x81\xab\xf0\x1e\x9b\xa6970=\xa7\xca\xfd\x0e\xb0\xd1m\x9b\xce\xc3\xecE\x82\xf6\xc5\x19\xf8\xdc\x99D]\xad\xd3O`O\x1bJI\xa1\x87\xf1\xd3\xbd\xd6K\xfc}\xeaJ8,\xcct6\x91\r\xd0-\x1f\xd85\xf9P`\x93a\x1eB\x15\xd3\r\xe3\xb8\xd6\x8f\x9a\x80%\x96\xa5`K\xd7]\x99\xd4\x92\x04]\xc4_\x14\xd0\xe7\xe1\x9a{\x98\xef\x9fY5\x8f\xf4\x89\xa4\xb8Q\xc285\x9f\x97\x03\xc3\xefI\xca\xf7\x81\xb4\xdfr\xeb\x9d*\xc3\xc9u\xae\xe7n\xe1D\xef\xdeIE\xb6Y\xcd\x8b\x98K\x92\xfeJ\x8e\xf3\xb3Y\xdf3\xa0\xd9\x8bD//\xafR\x0e\xb4\xf6_\x84\x1a\x84N-\x00^\xabO\xfcY\xa7\x90JzD\xc0\x89\x19N\xd2#\x9e\xec\xa3\xech` +\x08\x84\xed\x8b\xc0\x0e\xc5\x94\xca\x9d\xfe\xc7\xd4\x16\xc7\xe0\xef\xac\xf4\xa9i\x9a\xca\xc0G\xe3t#\x87\xe0\xb7\xdf\xb7\xdf\x04m\xf3\x17L*\x89\xbfP\x19\x99\xb0?\xc1~\xca\xa4\xe9r\xdbfw\xba\xb6\x97\x86\xdd\xe9H\xa3\xb0\xf6\x96XZ,\x84\x99\xd8T\xfcg\xa83\xd3\xd2\xdc\xdc\xd5w_^ZY\xb7\xf5s`b.\xd3\xfb\xa7\x04\xa8\x1f\xd5\x8d\xa0L6\x89v\x1c"\xe0\xecD\xb7\x8buv\xd0Fa\xe8-N\x82|\xc9\x16\x1dO\x1a\xfbS`eG\xf6\'\x87\xab\\\xba98\x85b5\xfew\xc1\x8f\xe9n\xf6>^\xbe\t\xcc\xf9\x84b\x11\x19=\xd8\xee\x9b\x7f\x17\x96\x14\xdf3\t\x001\xdf\xc3/iRp\xe3)H\xaaa\x96c{\x9e"\x18\xd5X\xf0\xc8\xc0\xdc\x07C\x1f$\x18:D[\x9d\x0e}\xd7\x90k\r\x9dr3\xc1\x81\n\xc8I\xf1<\x1a\x82\xfd\xfe\x14\xad\x92.\x1b\x03\x15\x87V\xb1f\xb6\x14\xc3\xed\xd7y\xc5\xd5]\xef\xb9\xe8:\xd6G7\xd7\x82J\x03\x90\nh\xe9W[\xca\x06=\xfd\x07`E\xc1rC\rS\x9b\xa0\xaf\xe2b;\xb8\xc4\xc4\xeb\x85.AF\x062\xc1^\x98&\xfb\x07\xc6y#&\x1d<\xa9\x8e\x1e5\xb3k\x84 \xa6\x84\x15\xdd\xe0\xd7\xed\xaa\xd4\xf6\x87\xd8\xbb\xa4Deq\x82\xfe\xa6\x12\x8fk\xe7\xc1l,pEy\xc3\xefIE\x8e\xfa2u\x10\xc5\xab#\x80\xf1/a\xd3\xb2o\x01\xc2\xbf\x0c\xb1\x9a\xfe\xb3\x8e\x90#\xe0\xcf\x8a\x84}\x95\xd0?t`/\x8dq8h0\xae0\xaa\xb7\xf3\xd2P\x10\xe9\x05\xd0f\xf8\xd9\x19\xf0\x7f\x1e\x0b\xa3)J\xc2a\xbd\xd6\xd9\xe3\xfb\x954\x85\xfc\xc63\xcc\xb5f\xc9<\xd1\xd7\xa8\x1f\xd2T\x87=\xff$v\n\x91_b\x9ati\x08(e\xb8\xd9|)D\x18K\xfcFn=!\xda\x86\xb4\xfb\xca:\xc1\xc9h\xb7\xc4\xf5\x14\xad\xfd\x1e6\xc9::\x02\x82\x96\xea\x10JZM5nK\xa9szv\xed\xa8\xbe\x97s\x97eK4\x83}\xceN\xe8\x9a\':\r\xe6K\xcf\x90\xc0\xb0\x9c\xb8\xfd\x8eS8\xe3\xe6\x02\xed\xe4<\x82\x9dL\x82\xa1K*K\xe0\xeen\x9c\x1fK?[\xfb\xb0C}o\xcf\xb1\xc5\xba\x98K\xef\xa9\xb7V2\x1d!\x1e\x86\xb6\xb4\xdd%\xe3Sf\xcc\x812\xd2\x969\x99E[w\xa9\xa8\xc6\xa21F\xb1%;e\x89 \x11b\xf6Sd\nn\xa5\x02\x90\xa1\'F:O\xd5\x9b\x17b\xa7\xa6\xdf\xa6\xdc\x96\x89j\xcf\x16\xf7\x98\'\x85\xc3;|"\xae8_\x14\xfc\x89\xc2\xe2\xe0\xea\xe8\xbd2\x07\x8a\xe1z\xe5g\xe4KO\x07\x94\xc1@\x1b\x88\xea|^\xbcp;u\xf9\x11\x8cx\xda\x8d\xd4\xf6\xe1\xdc)\xfaM\xb2J\x01b<\xe5V\xcc\x86$\xc5\xc4\x145\xe3L{>\xf8\x02\xc5\x16\xe5\xcb\xea7\x7f\xc5\xf6\xe6H\xbe\x85\x97<\xb0\xef\xfb9\xa8?\x17e]\xae\xd8j\xe2\x99\x85\x97s\x8d*w`Hz\x82\xa8\x8f\xc7\xc9\x99\xb4\\Z\xa4\xe3\xe4F\x16\xc4\xb2_d\x7fK\xe7bWa\x1d\x91\x1e..\x8fo|DT\tD\xbfi<\\\xf7\x02\x8b\xad?\xec\xedW-_&\xdc\xe1|\xbe\x1d\x0e\xca\xa9Wu\x08w\x0b\xcd\x87\xcc\xc8!#Z&\rAFoY\xa6G\t\x83\xcd?\xb1\x9b!Z\xd95\x81I\\x(\xa0e\xa59\xb0\x93\x9b\x04\x99b\x89\xf2:\xbc\xdf\x132\xc4V\xea2H>K\xc5\x81\x0b\xcbw\x9dxh\xbb\x060\xcd\xbbb\xa4\xb4\xbe\x03\xd2\xa1\xb6@e\x03B\xb1\xfd\xa4Z\xa7\x95\x97\xc2e\x97\xa96\x9a\'B6?\x1d"\x8d\x82\x9b\x1dR\x02\x11\xfe\x94t\xee\x8b/\x0e\xd7|\x9a\xcf\x98\x89\xdf\xb4\x1e\xa5!\xa3\x03\xd5\x7f\xd4\xc1\x03^\xddv\xaaS\x0c\xd7\xea#5^\xca\xcb0\xa5t\x82\xf0\xe7\x90\x19Q;\xd2e\xba\x8e\x12\xba\xe0\t?\xb4M\xaa\xd4\xcd:\x96=\xbd!\x8b\x94\x06C\xcf\\C\x08\xdcA\xe5\x9e\xe6\xba_\xf3\xbe\xa96\x90#\x11NL9\xb5\xe6&\xa7\xc7M3\x1b#\x999\xce\xf6\xf6\r\xf2\x7f\xf3\xd0\xe2}\x83\xee\xa8\x19Q\xd9E(\xbd\rO$E$\x86\xfa\xc3\x9e\x85\rl\x02D\x8b\xa1\x91\xd7\xf1\x95P\x01\x9d\xc8?>(\x9f+{\xd1\xa4\xc5\xef\xb8R\xdbK\xb4Q\x92\xf80\x8f\x84E\xad\xab^\xc0\xef\xf0#\x10\x1c.UY\xf4\xea~}K\x88F\x06\xce\xd8\xc8\x11fX\xc2z\xe7|B 6]\'\x93\x14T\xad\x9dJ\xcfDwor\x87\x1e\xf4=\x19\xe9\xdf\xcf\xa1\xbe\xcf\xea\x91\xe8\xb1\xadMC\xaeME\x8e\x03\xa8\xf9\xc3\x97&\xda\xa0\x06\xaf\xf0A\xe0\xfe\x850\n\xe4\x8bD\xcdU\xd1,\xa9<\xbb\xca\xdf0\xc7M\xc0\xc4\xa0f\x1e/\xb6\xd9\x12R\xfe\xc6\xba\x81r\x9c\r[\xfd5!\xf5\x9b\xa6\x0116-\xe7\xb6\x0b\xd7\xb8J\x82`\\_\x91\xfc\xa3-\x1c\x02Ee\x8c\x03(\x97\xa3\x0f\xf6\x0c\xcbT\x01su\xa4d\xf5\x01F;W<\x81\xb48|\xaf&&\xad\x7f\xc0\xcf\xa7\xa6\x13uP=\x80\xab3f\x072\xf0KIu\xb7S^P\xaf?^\x12\x1dHI\x12U\xf3>qL\xf5{5{\xaa\xe9\xd3\xa8\xc6\xff\xeeH\xe4\x0e\x99.<\xe4\xf1f\x0f\xdaMW\xc3\xf4\xcc\x16\xa7_E(R\x03\x06\xd1\xf7\xcd\xcb\x9eB\xa8\xf4f \xc8N\xa8Q1\x8d=\x94e\x0fz\xf5LqDZ\xb4Stsp\xfe\xb9F\xa8\x14\xa5\xe1R\x18\xbe\x9c/\xfa\xae\xddJj6\xa8\xb6\xcc^q\x97\xf6\xa0dE\xb9\xf2\xc6\xa0\xe2r\xacr\x93\n0B\x97\x02\xf6\x15\x15}&Z@\rgA\x9c\xcaU\xd5\xbf\x92\xcf@T\xfd\xd0]\xb8\xb3\xd9b*\x1b\x05C"H3W\x937\xcc\x04\x13\x9c\xfbD\xea\x18?\xa2N\x17\xd5\xb7\xe7W\xf0`\x80\xcaV\x99\xdb\x18\xd3u\x9e\xb5@\xc3\xf9>kjt\xb7\xbe\xf2\xfa\xb3q\x88\x865\x9bYqs K\xbdJ\xb5\xcb\'\x12fF\x18i\xb6\x02\x86\xa2\xa0\xaa\xdb\x90\xf4\xfb\x98\xef\x15r?\xa2\xb8\xe5#h\xbb[P0\x82\x89\xda+c\xe5\xf2\x01Dl\xae3dkq\xf0\x7f\x97G\x1aUzx\x81\xa7\x00\x98\xd8\x1a"\x82\ng\xa5|\xc8\xc2\xf2e\x98\x80\xd5B\xda\xbd3|1\xe9X1!\'\x96"UM\x95\xebny]\xa3\xb0\xb7\xf9y\xca\x17\xb3\xcb\x9d\xa2\xb2\xdd\xe4\xd6\x05v\t\x01\xddr\xdf\xc6c\xa4\x074\xeb\x18\x1dyuo_\xbd\xd1Q\xf7\xb9\x8e9\r}\x88<\x8f(\xb4\x06\x16\x9d7\x81{\xdc\xbey$\xea\r\xbe\xec+\x06`2IG\x96\x19\xc9\xef/\x12#\xbd}8\x15\x90\x90\x86\xa7\xb44\xb9\xc8Nc[\x7fr9_\x0b\x99B%\x0c\xa6\xb2\xbb\x86\x05K(\xd4'
p184
tp185
bI120
I0
F0.0
tp186
bsS'__doc__'
p187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p188
sbsS'mean'
p189
g8
(g9
(I0
tp190
g11
tp191
Rp192
(I1
(I2
tp193
g117
I00
S"6{X'\xdc\x87\xc6?\xe2B\x1dlS#\xd2\xbf"
p194
tp195
bsbag0
(g135
g2
Ntp196
Rp197
(dp198
g139
I2
sg140
g8
(g9
(I0
tp199
g11
tp200
Rp201
(I1
(I2
I2
tp202
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p203
tp204
bsg147
g0
(g148
g2
Ntp205
Rp206
(dp207
g152
g8
(g9
(I0
tp208
g11
tp209
Rp210
(I1
(I2
I2
tp211
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p212
tp213
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p214
tp215
Rp216
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp217
Rp218
(dp219
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p220
sbsg189
g8
(g9
(I0
tp221
g11
tp222
Rp223
(I1
(I2
tp224
g117
I00
S'"\xe5\xba\x99\xb8\xde\xd1\xbf\xef\xda\xb2\xa0x\x8e\xd7?'
p225
tp226
bsbag0
(g135
g2
Ntp227
Rp228
(dp229
g139
I2
sg140
g8
(g9
(I0
tp230
g11
tp231
Rp232
(I1
(I2
I2
tp233
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p234
tp235
bsg147
g0
(g148
g2
Ntp236
Rp237
(dp238
g152
g8
(g9
(I0
tp239
g11
tp240
Rp241
(I1
(I2
I2
tp242
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p243
tp244
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p245
tp246
Rp247
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp248
Rp249
(dp250
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p251
sbsg189
g8
(g9
(I0
tp252
g11
tp253
Rp254
(I1
(I2
tp255
g117
I00
S'i\xd7\x10\xe6\x8b\t\xe1?\xc4\xdf@3W,\xca?'
p256
tp257
bsbag0
(g135
g2
Ntp258
Rp259
(dp260
g139
I2
sg140
g8
(g9
(I0
tp261
g11
tp262
Rp263
(I1
(I2
I2
tp264
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p265
tp266
bsg147
g0
(g148
g2
Ntp267
Rp268
(dp269
g152
g8
(g9
(I0
tp270
g11
tp271
Rp272
(I1
(I2
I2
tp273
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p274
tp275
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p276
tp277
Rp278
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp279
Rp280
(dp281
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p282
sbsg189
g8
(g9
(I0
tp283
g11
tp284
Rp285
(I1
(I2
tp286
g117
I00
S'g\x12\xfemr\xbf\xd7?\x97`P\xafz\x1d\xd2\xbf'
p287
tp288
bsbag0
(g135
g2
Ntp289
Rp290
(dp291
g139
I2
sg140
g8
(g9
(I0
tp292
g11
tp293
Rp294
(I1
(I2
I2
tp295
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p296
tp297
bsg147
g0
(g148
g2
Ntp298
Rp299
(dp300
g152
g8
(g9
(I0
tp301
g11
tp302
Rp303
(I1
(I2
I2
tp304
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p305
tp306
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p307
tp308
Rp309
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp310
Rp311
(dp312
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p313
sbsg189
g8
(g9
(I0
tp314
g11
tp315
Rp316
(I1
(I2
tp317
g117
I00
S'\xe7yC{\xff\x0f\xbd\xbf\x88\x13\xbc\xee\xae/\xe0\xbf'
p318
tp319
bsbag0
(g135
g2
Ntp320
Rp321
(dp322
g139
I2
sg140
g8
(g9
(I0
tp323
g11
tp324
Rp325
(I1
(I2
I2
tp326
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p327
tp328
bsg147
g0
(g148
g2
Ntp329
Rp330
(dp331
g152
g8
(g9
(I0
tp332
g11
tp333
Rp334
(I1
(I2
I2
tp335
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p336
tp337
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p338
tp339
Rp340
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp341
Rp342
(dp343
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p344
sbsg189
g8
(g9
(I0
tp345
g11
tp346
Rp347
(I1
(I2
tp348
g117
I00
S'\xf5\xcd\x0e\x1f\n!\xcc\xbf\xda\xb8\x83\xdb|\xe9\xd3?'
p349
tp350
bsbag0
(g135
g2
Ntp351
Rp352
(dp353
g139
I2
sg140
g8
(g9
(I0
tp354
g11
tp355
Rp356
(I1
(I2
I2
tp357
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p358
tp359
bsg147
g0
(g148
g2
Ntp360
Rp361
(dp362
g152
g8
(g9
(I0
tp363
g11
tp364
Rp365
(I1
(I2
I2
tp366
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p367
tp368
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p369
tp370
Rp371
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp372
Rp373
(dp374
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p375
sbsg189
g8
(g9
(I0
tp376
g11
tp377
Rp378
(I1
(I2
tp379
g117
I00
S'?M\x0b\x92d\x1b\xec\xbfdS\x93q\xf4\xc3\xe7\xbf'
p380
tp381
bsbag0
(g135
g2
Ntp382
Rp383
(dp384
g139
I2
sg140
g8
(g9
(I0
tp385
g11
tp386
Rp387
(I1
(I2
I2
tp388
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p389
tp390
bsg147
g0
(g148
g2
Ntp391
Rp392
(dp393
g152
g8
(g9
(I0
tp394
g11
tp395
Rp396
(I1
(I2
I2
tp397
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p398
tp399
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p400
tp401
Rp402
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp403
Rp404
(dp405
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p406
sbsg189
g8
(g9
(I0
tp407
g11
tp408
Rp409
(I1
(I2
tp410
g117
I00
S'S\x13\xc2q4w\xd9?\xbb<\xd6\xc1.|\xab?'
p411
tp412
bsbag0
(g135
g2
Ntp413
Rp414
(dp415
g139
I2
sg140
g8
(g9
(I0
tp416
g11
tp417
Rp418
(I1
(I2
I2
tp419
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p420
tp421
bsg147
g0
(g148
g2
Ntp422
Rp423
(dp424
g152
g8
(g9
(I0
tp425
g11
tp426
Rp427
(I1
(I2
I2
tp428
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p429
tp430
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p431
tp432
Rp433
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp434
Rp435
(dp436
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p437
sbsg189
g8
(g9
(I0
tp438
g11
tp439
Rp440
(I1
(I2
tp441
g117
I00
S'\xb2\x11j\xe8|6\xc2\xbf\xe1\x19M(\xfeN\xf0?'
p442
tp443
bsbag0
(g135
g2
Ntp444
Rp445
(dp446
g139
I2
sg140
g8
(g9
(I0
tp447
g11
tp448
Rp449
(I1
(I2
I2
tp450
g117
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
p451
tp452
bsg147
g0
(g148
g2
Ntp453
Rp454
(dp455
g152
g8
(g9
(I0
tp456
g11
tp457
Rp458
(I1
(I2
I2
tp459
g117
I01
S'\x00\x00\x00\x00\x00\x00\xf0\xbf\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\xf0?'
p460
tp461
bsg159
g160
(g117
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p462
tp463
Rp464
sg164
I2
sg165
Nsbsg166
g0
(g167
g2
Ntp465
Rp466
(dp467
g171
g173
sg187
S'\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    mean : array_like, optional\n        Mean of the distribution (default zero)\n    cov : array_like, optional\n        Covariance matrix of the distribution (default one)\n    allow_singular : bool, optional\n        Whether to allow a singular covariance matrix.  (Default: False)\n    random_state : None or int or np.random.RandomState instance, optional\n        If int or RandomState, use it for drawing the random variates.\n        If None (or np.random), the global np.random state is used.\n        Default is None.\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    Setting the parameter `mean` to `None` is equivalent to having `mean`\n        be the zero-vector. The parameter `cov` can be a scalar, in which case\n        the covariance matrix is the identity times that value, a vector of\n        diagonal entries for the covariance matrix, or a two-dimensional\n        array_like.\n        \n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.empty(x.shape + (2,))\n    >>> pos[:, :, 0] = x; pos[:, :, 1] = y\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    '
p468
sbsg189
g8
(g9
(I0
tp469
g11
tp470
Rp471
(I1
(I2
tp472
g117
I00
S'\x97\x1e\xb3\xedg\x18\xc4\xbf\xac\xc2\xd5\xe7\x17R\xd8\xbf'
p473
tp474
bsbasS'self_prob'
p475
g8
(g9
(I0
tp476
g11
tp477
Rp478
(I1
(I10
tp479
g117
I00
S'\x95\xdd\xc1s+\xb1\xe4?\xef9\xfa\xfeB.\xe6?+\x9d\xa8\xe9ve\xe3?\x87\xc0^-.\xe9\xe7?9I\x85\xab\xc9d\xec?{\x9e\x80J\xe7A\xe2?\xb8\xa7\x94\x07\xf4b\xef?F\xc5\xe9\x96u?\xe1?L\x98\xbf\xec#\xf3\xe9?\x00\x00\x00\x00\x00\x00\x00\x00'
p480
tp481
bsb.